# Definizione della griglia di iperparametri e kernel
#Eseguire cosi provare
param_grid = {
    'C': [0.8,1],
    'epsilon': [0.5,0.8],
    'kernel': ['poly']
}
#Settaggio: 'C': 0.1, 'epsilon': 0.01, 'kernel': 'poly'}
# MSE: 86.91330648460543
# RMSE: 9.322730634562248
# R2 Score: 0.21142246843562673
# MAE: 6.22451918257399
# MAPE: 0.003128732327132059
#----------------
#{'C': 0.5, 'epsilon': 0.1, 'kernel': 'poly'} 
#MSE: 84.39535038972714


#Best parameters------ {'C': 1, 'epsilon': 0.5, 'kernel': 'poly'
# GRID SEARCH
# 'C': [1],
#'epsilon': [0.1,0.5],
#'kernel': ['poly']

#MSE: 83.466370627596
#RMSE: 9.135993138547994
#R2 Score: 0.24269703707791712
#MAE: 6.073974985117682
#MAPE: 0.0030530406859256344

#Best parameters: {'C': 1, 'epsilon': 0.8, 'kernel': 'poly'}-- Meglio
#-----------GRID SEARCH-----------
# 'C': [0.1,1],
#     'epsilon': [0.5,0.8],
#     'kernel': ['poly']
#--------------------------------
#MSE: 83.40573931226207
#RMSE: 9.132674269471242
#R2 Score: 0.2432471541418677
#MAE: 6.07423337170572
#MAPE: 0.0030531516336399058

y_train_new = np.ravel(y_train)

# Creazione del modello SVR
svr_model = SVR()

# Ricerca Grid per il tuning degli iperparametri e dei kernel
grid_search = GridSearchCV(estimator=svr_model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error',n_jobs=-1)
grid_search.fit(X_scaled, y_train_new)

# Valutazione del modello migliore
best_model = grid_search.best_estimator_
y_predictions = best_model.predict(X_val_scaled)

# Calcola MSE
mse = mean_squared_error(y_val, y_predictions)
# Calcola RMSE
rmse = np.sqrt(mse)
# Calcola R2 Score
r2 = r2_score(y_val, y_predictions)
# Calcola MAE
mae = mean_absolute_error(y_val, y_predictions)
# Calcola MAPE
mape = mean_absolute_percentage_error(y_val,y_predictions)

print("Best parameters:", grid_search.best_params_)
print("MSE:", mse)
print("RMSE:", rmse)
print("R2 Score:", r2)
print("MAE:", mae)
print("MAPE:", mape)