X= data[data.columns[1:]]
Y=data[data.columns[0]]

# `num_col_names` lista con i nomi delle 89 colonne numeriche
num_col_names =X.columns.tolist()

X_train, X_test, y_train, y_test  = train_test_split(X, Y, test_size=0.1, random_state=seed,shuffle=True)
X_train, X_val, y_train, y_val  = train_test_split(X_train, y_train, test_size=0.25, random_state=seed,shuffle=True)  # 0.9 x 0.25 = 0.22 di validation

#Scaling dei dati MinMaxScaler()
scaler=MinMaxScaler()
X_scaled=scaler.fit_transform(X_train)
X_val_scaled=scaler.transform(X_val)
X_test_scaled=scaler.transform(X_test)

# MinMaxScaling e creazione DataFrame per train,validation,test
train = pd.DataFrame(X_scaled, columns=X.columns)
train['Year'] = y_train.values

val = pd.DataFrame(X_val_scaled, columns=X.columns)
val['Year'] = y_val.values

test = pd.DataFrame(X_test_scaled, columns=X.columns)
test['Year'] = y_test.values

# Configurazione dei dati
data_config = DataConfig(
    target=["Year"],  # target should always be a list
    continuous_cols=num_col_names,
    categorical_cols=[],
    normalize_continuous_features=False
)

#Con batch_size: 128 MSE=128
# Configurazione del trainer
trainer_config = TrainerConfig(
    #auto_lr_find=True,  # Runs the LRFinder to automatically derive a learning rate
    batch_size=32, #1024
    max_epochs=100,
    early_stopping_patience=5,  # Numero di epoche di attesa per il miglioramento
    precision=32,
    seed=seed
)

# Configurazione dell'ottimizzatore
optimizer_config = OptimizerConfig(
    optimizer="AdamW"
)

# Configurazione del modello TabNet
model_config = TabNetModelConfig(
    task="regression",
    n_d=16,
    n_a=16,
    n_steps=10,
    gamma=1.5,
    n_independent=2,
    n_shared=2,
    #virtual_batch_size=128
    seed=seed
)

# Crea il modello tabular
tabular_model = TabularModel(
    data_config=data_config,
    model_config=model_config,
    optimizer_config=optimizer_config,
    trainer_config=trainer_config,
)
#--------------------------------------------- TRAINING DEL MODELLO ---------------------------------------------
# `train` e `val`  DataFrames di training e validation
tabular_model.fit(train=train, validation=val, seed=seed)

# Valutare il modello
result = tabular_model.evaluate(val)
print(result)

# Fare predizioni
pred_df = tabular_model.predict(test)
print(pred_df)

y_true = test['Year']
y_pred = pred_df['Year_prediction']

mse = mean_squared_error(y_true, y_pred)
mae = mean_absolute_error(y_true, y_pred)
mape = mean_absolute_percentage_error(y_true, y_pred)
r2score = r2_score(y_true, y_pred)
print("MSE: ", mse, " MAE:", mae, " MAPE:", mape, " R2_SCORE:", r2score)